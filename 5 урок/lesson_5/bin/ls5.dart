// ignore: unused_import
import 'dart:math';

// Что такое функция?
// Функции представляют некоторые действия. Мы можем оформить набор операторов в
// виде одной функции и многократно вызывать ее в программе.
// Говоря простым языком они(Функции) помогают нам избежать многократного повторения кода

void main(List<String> args) {
  hello();
  // Вызов функции с неименованными параметрами
  sum(45, -32);
  sum(80, 20);
  sum(45, -20);
  // Вызов функции с именованными параметрами
  sum2(); // Можно вызвать функцию без передачи аргумента, так как есть значениие поумолчанию
  sum2(a: 23); // Или же передать только 1 параметр
  sum2(b: 44); // Или же передать только 1 параметр
  // Вызов функции с именованными и обязательными параметрами
  sum3(a: 2, b: 3);
  sum3(a: 5, b: 5);

  // Помимо того, что функцию можно создать, её ещё можно присвоить в переменную
  // func(); Но такую функцию можно вызвать только после её создания, так как эта переменная
  // ещё не определена

  Function func = () {
    print('Привет я функция ');
  };

  func();

  // Если функция возвращает значение, значит мы можем это значение присвоить некоторой переменной
  // ignore: omit_local_variable_types
  int value = sumRet(a: 4, b: 4);

  print('Value = $value');

  // Задание со степенями
  print(ourPow(a: 5, b: 4));
  print(ourPow(a: 3, b: 0));
  print(ourPow(a: 0, b: 5));
  print(ourPow(a: 1, b: 3));
  print(ourPow(a: 10, b: 10));
  // Задание с факториалом числа
  print('Факториал числа 5 = ${fact(5)}');
}

// Построение функций

// [тип] имя_функции(параметры){
//  выполняемые_выражения
// }

void hello() {
  print('Hello');
}

// Функция hello не возвращает никакого результата, а просто выполняет некоторые действия,
// поэтому функция имеет тип void. Все, что она делает - это выводит строку Hello.

// Также в функцию можно передавать некие значения(аргуметы/параметры).
// Аргументы определяются и передаются в круглых скобках:

void sum(int a, int b) {
  // Это способ передачи неименнованых параметров,
  print('Сума чисел $a + $b равна ${a + b}');
}

void sum2({int a = 1, int b = 1}) {
  // Это способ передачи именнованых параметров, обратите внимание
  // что при передачи параметров таким образом им необходимо дать значение
  // поумолчанию
  print('Сума чисел $a + $b равна ${a + b}');
}

// Также вместо того чтобы указывать значение по умолчанию, можно просто сделать параметр
// обязательным используюя ключевое слово required
void sum3({required int a, required int b}) {
  // Это способ передачи именнованых и обязательных параметров
  print('Сума чисел $a + $b равна ${a + b}');
}

// Помимо того что функция может исполнять какой-то код, она также может возвращать значение
int sumRet({required int a, required int b}) {
  return a + b;
}

// Задание написать функцию которая принимает 2 числа a,b и возвращает значение а в степени b

int ourPow({required int a, required int b}) {
  // проверка чисел
  if (b == 0 || a == 1) {
    return 1;
  } else if (b == 1) {
    return a;
  }
  // ignore: omit_local_variable_types

  int res = a;

  for (var i = 1; i < b; i++) {
    res *= a;
  }

  return res;
}

// Отдельно остановимся на рекурсивных функциях. Рекурсивная функция представляет такую конструкцию,
// при которой функция вызывает саму себя.

// Возьмем, к примеру, вычисление факториала, которое использует формулу n! = 1 * 2 * … * n.
// Например, факториал числа 5 равен 120 = 1 * 2 * 3 * 4 * 5.

int fact(int num) {
  switch (num) {
    case 0:
      return 0;
    case 1:
      return 1;
    default:
      return num * fact(num - 1);
  }
}
/* var height = 11; // Высота ромба
  var width = 11; // Ширина ромба

  var pos = 0; // Позиция от центра
  var result = ''; // Результат вывода
  var symbol = ''; // Cимвол из которого будет состоять ромб
  var randomNum = Random().nextInt(5); // Рандомное число для выбора символа

  switch (randomNum) {
    // Тут мы проверям наше рандомное число и относительно его
    // выбираем наш символ
    case 0:
      symbol = '+';
      break;
    case 1:
      symbol = '*';
      break;
    case 2:
      symbol = '=';
      break;
    case 3:
      symbol = '0';
      break;
    default:
      symbol = '#';
  }

  for (var y = 0; y < height; y++) {
    // Цикл в котором мы итерируемся по строкам
    for (var x = 0; x < width; x++) {
      // Цикл в котором мы заполняем одну строчку нужными нам символами
      if ((x == width ~/ 2 - pos) || (x == width ~/ 2 + pos)) {
        // В этом условии (width ~/ 2) - это центр ромба по оси х
        // a pos - это отдаление от центра
        result +=
            symbol; // и тут результат мы прибавляем наш символ если нашли нужную нам кординату x
      } else {
        result += ' ';
        // Если же кордината Х нам не подходит, то мы добаляем пробел
      }
    }

    result += '\n'; // В конце каждой строчки добавляем перенос

    if (y < height ~/ 2) {
      // Проверяем дошли ли мы до середины высоты ромба
      pos++;
      // Если не дошли, то прибавляем один к нашему отдалению
    } else {
      pos--;
      // Если дошли, то отнимаем один от нашего отдаления
    }
  }
  print(result); */