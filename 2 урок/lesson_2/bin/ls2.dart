// ignore_for_file: omit_local_variable_types, unnecessary_null_in_if_null_operators

void main(List<String> arguments) {
//   // Спец символы "\n" , "\t", "\"

//   // Символ "\n" - служит для переноса строки
//   print('Привет\nМир\n!!!\n');
//   // Символ "\t" - служит для добавления табуляции
//   print('Привет\tМир\t!!!\n');
//   // Символ "\" - может добавить исключение к символам
//   print('Привет \'Мир\' !!!\n');

//   // ignore: omit_local_variable_types
//   String str = 'world';
//   // Пример интерполяции $
//   print('Hello: $str !!!');

//   // Пример интерполяции ${}

//   // ignore: omit_local_variable_types
//   int thisYear = 2021;
//   // ignore: omit_local_variable_types
//   int birthYear = 2004;
//   print('Ваш возраст: ${thisYear - birthYear}\n');

//   /* Метод runTimeType отдаст нам тип данных переменных */
//   print('Тип данных переменной thisYear: ${thisYear.runtimeType}');
//   print('Тип данных переменной Str: ${str.runtimeType}');
//   print('Тип данных переменной birthYear: ${birthYear.runtimeType}\n');

//   /* var - Это уникальный тип дынных. Он автоматически определит и установит тип данных перменной, после передачи в неё значения */
//   var num1 = 12;
//   print('Тип данных переменной num1: ${num1.runtimeType}');
//   var str1 = 'Я строка';
//   print('Тип данных переменной str1: ${str1.runtimeType}');
//   var active = false ;
//   print('Тип данных переменной active: ${active.runtimeType}');
//   var Pi = 3.14;
//   print('Тип данных переменной Pi: ${Pi.runtimeType}\n');

//   /*
//     Но стоет учесть что тип данных с использование var можно определить только один раз.
//     Т.е. если вы присвоили переменной каке-то целое число, а потом решили ему присвоить строку, то вы получите ошибку
//   */
//   var someNum = 43;
//   // print('Тип данных переменной someNum: ${someNum.runtimeType}');
//   // someNum = 'sdfsd';
//   // print('Тип данных переменной someNum: ${someNum.runtimeType}');

//   /* Однако если вы присвоите переменной someNum Целое число, то ошибок не будет, так как переменная someNum имеет целочисленный тип данных */
//   someNum = 56;
//   print('Тип данных переменной someNum: ${someNum.runtimeType}\n');

//   // Тип данных dynamic
//   /* В случае если вы знаете, что тип данных переменной будет меняться, то следует использовать динамический тип данных (dynamic)*/
//   dynamic someNum2 = 43;
//   print('Тип данных переменной someNum2: ${someNum2.runtimeType}');
//   someNum2 = 'Теперь строка';
//   print('Тип данных переменной someNum2: ${someNum2.runtimeType}');

//   // Тип данных const
//   // const используется для того, чтобы избежать изменений переменных
//   // В случае если же, Вы захотите присвоить новое значение переменной const,
//      то Dart начнет указывать на ошибку присвоения.
//   // Например число Пи(pi) является константой (3.14) и его не нужно менять.
//   // const подобно var и dynamic сам определит тип значения

//   //НАПРИМЕР
//   const pi = 3.14;
//   print(pi.runtimeType);
//   // pi = 2.64;

//   // Тип данных final
//   /* Работает по такому же принципу как и тип данных const. За одним исключением:
//   Если при объявлении const, автоматически выделяется место в памяти программы, но к ней не будет обращения, она все равно будет занимать определенное место в памяти программы.
//   У final же, наоборот, место в памяти будет выделяться в процессе работы программы, если будет обращение к переменной.
//    */

//   // Например
//   final ram = 25; // На этом этапе место в памяти не выделяется
//   print(ram); // Здесь, мы обращаемся к ней, и она выделяет место в ОЗУ.

//   // Значение null
//   /*
//   В Dart есть специальная константа null, которая говорит, что у переменной или константы по сути отсутствует значение.
//   */

//   // String example;
//   // print(example);
// // Dart выдаст ошибку, из-за того, что String - не принимает значение null

//   var example2;
//   print(example2);

//   // nullable-типы
//   /*
//   Имеют сходство с обычными типами данных (н-р: String, int и т.д.), но при этом они могут принимать занчение null
//   И пишутся при помощи оператора ?

//   // Оператор ?
//    */

//   String? example3;
//   print(example3); // В данном случае Dart не выдал ошибку, и мы смогли вывести переменную в консоль

//   // Оператор ??
//   /* Оператор ?? при присвоении переменной значений выполнит проверку на null. */

//   // ignore: omit_local_variable_types
//   var value1 = null;
//   var value2 = 25;
//   var result = value1 ?? value2;
//   print(result);

//   // По сути оператор ?? выполняет некое условие сравнивания значений в переменных. И возвращает любое значение кроме null.

//   var a = null;
//   var b = null;
//   var x = 12;
//   var y = true;
//   var z = '32';

/* 

void main(List<String> args) {
  int a = 50;
  int b = -288;
  print(a);
  print(b);
  b = a + b;
  a = b - a;
  b = b - a;
  print(a);
  print(b);
}
 */

//   var result2 =  a ?? b ?? x ?? y ?? z;
//   print(result2);
// // Когда в условии более одного сравнения, оператор ??, вернет первое значение не равное null.

// // Оператор !
// /*
// В некоторых ситуациях переменная может быь определена как переменная nullable-типа, тем не менее при этом могут быть исключены
// ситуации, что данная переменная будет хранить null. И если мы точно уверены, что эта переменная в процессе работы программы не получит
// значение null, то в этом случае мы можем принимать оператор !, который ставится после названия переменной

// Например
//  */
//     int? alfa = 23;
//     int beta = alfa!;
//     print(beta);
}
